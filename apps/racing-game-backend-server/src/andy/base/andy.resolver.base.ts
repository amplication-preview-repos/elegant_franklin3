/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Andy } from "./Andy";
import { AndyCountArgs } from "./AndyCountArgs";
import { AndyFindManyArgs } from "./AndyFindManyArgs";
import { AndyFindUniqueArgs } from "./AndyFindUniqueArgs";
import { CreateAndyArgs } from "./CreateAndyArgs";
import { UpdateAndyArgs } from "./UpdateAndyArgs";
import { DeleteAndyArgs } from "./DeleteAndyArgs";
import { LeaderboardFindManyArgs } from "../../leaderboard/base/LeaderboardFindManyArgs";
import { Leaderboard } from "../../leaderboard/base/Leaderboard";
import { RaceFindManyArgs } from "../../race/base/RaceFindManyArgs";
import { Race } from "../../race/base/Race";
import { ScoreFindManyArgs } from "../../score/base/ScoreFindManyArgs";
import { Score } from "../../score/base/Score";
import { AndyService } from "../andy.service";
@graphql.Resolver(() => Andy)
export class AndyResolverBase {
  constructor(protected readonly service: AndyService) {}

  async _andiesMeta(
    @graphql.Args() args: AndyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Andy])
  async andies(@graphql.Args() args: AndyFindManyArgs): Promise<Andy[]> {
    return this.service.andies(args);
  }

  @graphql.Query(() => Andy, { nullable: true })
  async andy(@graphql.Args() args: AndyFindUniqueArgs): Promise<Andy | null> {
    const result = await this.service.andy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Andy)
  async createAndy(@graphql.Args() args: CreateAndyArgs): Promise<Andy> {
    return await this.service.createAndy({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Andy)
  async updateAndy(@graphql.Args() args: UpdateAndyArgs): Promise<Andy | null> {
    try {
      return await this.service.updateAndy({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Andy)
  async deleteAndy(@graphql.Args() args: DeleteAndyArgs): Promise<Andy | null> {
    try {
      return await this.service.deleteAndy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Leaderboard], { name: "leaderboards" })
  async findLeaderboards(
    @graphql.Parent() parent: Andy,
    @graphql.Args() args: LeaderboardFindManyArgs
  ): Promise<Leaderboard[]> {
    const results = await this.service.findLeaderboards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Race], { name: "races" })
  async findRaces(
    @graphql.Parent() parent: Andy,
    @graphql.Args() args: RaceFindManyArgs
  ): Promise<Race[]> {
    const results = await this.service.findRaces(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Score], { name: "scores" })
  async findScores(
    @graphql.Parent() parent: Andy,
    @graphql.Args() args: ScoreFindManyArgs
  ): Promise<Score[]> {
    const results = await this.service.findScores(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
