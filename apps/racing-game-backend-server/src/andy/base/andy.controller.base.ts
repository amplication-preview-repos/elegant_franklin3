/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AndyService } from "../andy.service";
import { AndyCreateInput } from "./AndyCreateInput";
import { Andy } from "./Andy";
import { AndyFindManyArgs } from "./AndyFindManyArgs";
import { AndyWhereUniqueInput } from "./AndyWhereUniqueInput";
import { AndyUpdateInput } from "./AndyUpdateInput";
import { LeaderboardFindManyArgs } from "../../leaderboard/base/LeaderboardFindManyArgs";
import { Leaderboard } from "../../leaderboard/base/Leaderboard";
import { LeaderboardWhereUniqueInput } from "../../leaderboard/base/LeaderboardWhereUniqueInput";
import { RaceFindManyArgs } from "../../race/base/RaceFindManyArgs";
import { Race } from "../../race/base/Race";
import { RaceWhereUniqueInput } from "../../race/base/RaceWhereUniqueInput";
import { ScoreFindManyArgs } from "../../score/base/ScoreFindManyArgs";
import { Score } from "../../score/base/Score";
import { ScoreWhereUniqueInput } from "../../score/base/ScoreWhereUniqueInput";

export class AndyControllerBase {
  constructor(protected readonly service: AndyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Andy })
  async createAndy(@common.Body() data: AndyCreateInput): Promise<Andy> {
    return await this.service.createAndy({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Andy] })
  @ApiNestedQuery(AndyFindManyArgs)
  async andies(@common.Req() request: Request): Promise<Andy[]> {
    const args = plainToClass(AndyFindManyArgs, request.query);
    return this.service.andies({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Andy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async andy(
    @common.Param() params: AndyWhereUniqueInput
  ): Promise<Andy | null> {
    const result = await this.service.andy({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Andy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAndy(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() data: AndyUpdateInput
  ): Promise<Andy | null> {
    try {
      return await this.service.updateAndy({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Andy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAndy(
    @common.Param() params: AndyWhereUniqueInput
  ): Promise<Andy | null> {
    try {
      return await this.service.deleteAndy({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/leaderboards")
  @ApiNestedQuery(LeaderboardFindManyArgs)
  async findLeaderboards(
    @common.Req() request: Request,
    @common.Param() params: AndyWhereUniqueInput
  ): Promise<Leaderboard[]> {
    const query = plainToClass(LeaderboardFindManyArgs, request.query);
    const results = await this.service.findLeaderboards(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        position: true,

        race: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaderboards")
  async connectLeaderboards(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: LeaderboardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaderboards: {
        connect: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaderboards")
  async updateLeaderboards(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: LeaderboardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaderboards: {
        set: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaderboards")
  async disconnectLeaderboards(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: LeaderboardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaderboards: {
        disconnect: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/races")
  @ApiNestedQuery(RaceFindManyArgs)
  async findRaces(
    @common.Req() request: Request,
    @common.Param() params: AndyWhereUniqueInput
  ): Promise<Race[]> {
    const query = plainToClass(RaceFindManyArgs, request.query);
    const results = await this.service.findRaces(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        track: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/races")
  async connectRaces(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: RaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      races: {
        connect: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/races")
  async updateRaces(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: RaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      races: {
        set: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/races")
  async disconnectRaces(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: RaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      races: {
        disconnect: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/scores")
  @ApiNestedQuery(ScoreFindManyArgs)
  async findScores(
    @common.Req() request: Request,
    @common.Param() params: AndyWhereUniqueInput
  ): Promise<Score[]> {
    const query = plainToClass(ScoreFindManyArgs, request.query);
    const results = await this.service.findScores(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        race: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scores")
  async connectScores(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        connect: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scores")
  async updateScores(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        set: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scores")
  async disconnectScores(
    @common.Param() params: AndyWhereUniqueInput,
    @common.Body() body: ScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scores: {
        disconnect: body,
      },
    };
    await this.service.updateAndy({
      where: params,
      data,
      select: { id: true },
    });
  }
}
