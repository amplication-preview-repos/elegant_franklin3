/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Beneficiary as PrismaBeneficiary } from "@prisma/client";

export class BeneficiaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BeneficiaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.beneficiary.count(args);
  }

  async beneficiaries(
    args: Prisma.BeneficiaryFindManyArgs
  ): Promise<PrismaBeneficiary[]> {
    return this.prisma.beneficiary.findMany(args);
  }
  async beneficiary(
    args: Prisma.BeneficiaryFindUniqueArgs
  ): Promise<PrismaBeneficiary | null> {
    return this.prisma.beneficiary.findUnique(args);
  }
  async createBeneficiary(
    args: Prisma.BeneficiaryCreateArgs
  ): Promise<PrismaBeneficiary> {
    return this.prisma.beneficiary.create(args);
  }
  async updateBeneficiary(
    args: Prisma.BeneficiaryUpdateArgs
  ): Promise<PrismaBeneficiary> {
    return this.prisma.beneficiary.update(args);
  }
  async deleteBeneficiary(
    args: Prisma.BeneficiaryDeleteArgs
  ): Promise<PrismaBeneficiary> {
    return this.prisma.beneficiary.delete(args);
  }
}
