/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MapService } from "../map.service";
import { MapCreateInput } from "./MapCreateInput";
import { Map } from "./Map";
import { MapFindManyArgs } from "./MapFindManyArgs";
import { MapWhereUniqueInput } from "./MapWhereUniqueInput";
import { MapUpdateInput } from "./MapUpdateInput";

export class MapControllerBase {
  constructor(protected readonly service: MapService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Map })
  async createMap(@common.Body() data: MapCreateInput): Promise<Map> {
    return await this.service.createMap({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Map] })
  @ApiNestedQuery(MapFindManyArgs)
  async maps(@common.Req() request: Request): Promise<Map[]> {
    const args = plainToClass(MapFindManyArgs, request.query);
    return this.service.maps({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Map })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async map(@common.Param() params: MapWhereUniqueInput): Promise<Map | null> {
    const result = await this.service.map({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Map })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMap(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() data: MapUpdateInput
  ): Promise<Map | null> {
    try {
      return await this.service.updateMap({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Map })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMap(
    @common.Param() params: MapWhereUniqueInput
  ): Promise<Map | null> {
    try {
      return await this.service.deleteMap({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
