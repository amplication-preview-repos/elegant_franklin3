/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Andy as PrismaAndy,
  Leaderboard as PrismaLeaderboard,
  Race as PrismaRace,
  Score as PrismaScore,
} from "@prisma/client";

export class AndyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AndyCountArgs, "select">): Promise<number> {
    return this.prisma.andy.count(args);
  }

  async andies(args: Prisma.AndyFindManyArgs): Promise<PrismaAndy[]> {
    return this.prisma.andy.findMany(args);
  }
  async andy(args: Prisma.AndyFindUniqueArgs): Promise<PrismaAndy | null> {
    return this.prisma.andy.findUnique(args);
  }
  async createAndy(args: Prisma.AndyCreateArgs): Promise<PrismaAndy> {
    return this.prisma.andy.create(args);
  }
  async updateAndy(args: Prisma.AndyUpdateArgs): Promise<PrismaAndy> {
    return this.prisma.andy.update(args);
  }
  async deleteAndy(args: Prisma.AndyDeleteArgs): Promise<PrismaAndy> {
    return this.prisma.andy.delete(args);
  }

  async findLeaderboards(
    parentId: string,
    args: Prisma.LeaderboardFindManyArgs
  ): Promise<PrismaLeaderboard[]> {
    return this.prisma.andy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .leaderboards(args);
  }

  async findRaces(
    parentId: string,
    args: Prisma.RaceFindManyArgs
  ): Promise<PrismaRace[]> {
    return this.prisma.andy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .races(args);
  }

  async findScores(
    parentId: string,
    args: Prisma.ScoreFindManyArgs
  ): Promise<PrismaScore[]> {
    return this.prisma.andy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scores(args);
  }
}
