/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BeneficiaryService } from "../beneficiary.service";
import { BeneficiaryCreateInput } from "./BeneficiaryCreateInput";
import { Beneficiary } from "./Beneficiary";
import { BeneficiaryFindManyArgs } from "./BeneficiaryFindManyArgs";
import { BeneficiaryWhereUniqueInput } from "./BeneficiaryWhereUniqueInput";
import { BeneficiaryUpdateInput } from "./BeneficiaryUpdateInput";

export class BeneficiaryControllerBase {
  constructor(protected readonly service: BeneficiaryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Beneficiary })
  async createBeneficiary(
    @common.Body() data: BeneficiaryCreateInput
  ): Promise<Beneficiary> {
    return await this.service.createBeneficiary({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Beneficiary] })
  @ApiNestedQuery(BeneficiaryFindManyArgs)
  async beneficiaries(@common.Req() request: Request): Promise<Beneficiary[]> {
    const args = plainToClass(BeneficiaryFindManyArgs, request.query);
    return this.service.beneficiaries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Beneficiary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async beneficiary(
    @common.Param() params: BeneficiaryWhereUniqueInput
  ): Promise<Beneficiary | null> {
    const result = await this.service.beneficiary({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Beneficiary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBeneficiary(
    @common.Param() params: BeneficiaryWhereUniqueInput,
    @common.Body() data: BeneficiaryUpdateInput
  ): Promise<Beneficiary | null> {
    try {
      return await this.service.updateBeneficiary({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Beneficiary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBeneficiary(
    @common.Param() params: BeneficiaryWhereUniqueInput
  ): Promise<Beneficiary | null> {
    try {
      return await this.service.deleteBeneficiary({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
